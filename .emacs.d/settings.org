#+title: Emacs init File
#+author: Andrew Smith

* Packages
** MELPA
#+BEGIN_SRC emacs-lisp
(load "package")
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)       ; New MELPA repository
(setq package-archive-enable-alist '(("melpa" deft magit)))     ; Index MELPA packages for easy browsing
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
(defvar andrew/packages '(2048-game             ; Play a game of 2048.  Why not?
                          auctex                ; Enhancements for LaTeX
                          auto-complete         ; Auto-completion for most programming languages
                          autopair
                          darktooth-theme       ; Colour theme similar to gruvbox
                          evil                  ; vim emulation
                          evil-surround         ; surround.vim for evil-mode
                          exec-path-from-shell  ; Use path variables from the shell (ZSH in my case)
                          git-gutter-fringe     ; Show git diff in fringe
                          jedi                  ; Enhance Python auto-completion and argument hinting
                          linum-relative        ; Relative line numbers, similar to vim's hybrid line numbering
                          magit                 ; git integration
                          mark-multiple         ; Multiple cursors
                          markdown-mode         ; Markdown support
                          mu4e-alert            ; Notifications for new emails in mu4e; mu4e itself must be installed from Homebrew.
                          nyan-mode             ; Use Nyan Cat as a file position indicator.  Stupid, but surprisingly useful.
                          rainbow-delimiters    ; Colour-coordinate matching delimiters
                          rainbow-mode          ; Show colour strings in their actual colours
                          sr-speedbar           ; Dock the speedbar in the same frame as the file
                          swiper                ; Enhanced ido
                          twittering-mode       ; Browse twitter in Emacs
                          w3m)                  ; Web browsing in Emacs
"Default packages")
#+END_SRC

** Install non-installed packages on startup
#+BEGIN_SRC emacs-lisp
(defun andrew/packages-installed-p ()
  (loop for package in andrew/packages
        when (not (package-installed-p package)) do (return nil)
        finally (return t)))

(unless (andrew/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (package andrew/packages)
    (when (not (package-installed-p package))
      (package-install package))))
#+END_SRC

** Random Elisp
#+BEGIN_SRC emacs-lisp
(defvar elisp-path '("~/.emacs.d/elisp"))
(mapcar '(lambda(p) (add-to-list 'load-path p)) elisp-path)
#+END_SRC

* Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))   ; Don't clutter up my directories with backup files
(setq backup-by-copying t)                                      ; Copy files to create backups
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)                                        ; Delete old backup files
#+END_SRC

* GUI options
** No GUI elements
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Display buffer name in window title
#+BEGIN_SRC emacs-lisp
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)                       ; Yay, laziness!
(global-set-key (kbd "RET") 'newline-and-indent)        ; Sensical RET binding
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "-PfEd-Fantasque Sans Mono-normal-normal-normal-*-19-*-*-*-m-0-iso10646-1" ))
(set-face-attribute 'default t :font "-PfEd-Fantasque Sans Mono-normal-normal-normal-*-19-*-*-*-m-0-iso10646-1" )
#+END_SRC

** Buffer settings
#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1                       ; Show keystrokes quickly
      use-dialog-box nil                        ; No dialog boxes when running in GUI mode
      visual-bell t)                            ; Don't beep every five seconds
(show-paren-mode t)                             ; Show matching parentheses
(setq column-number-mode t)                     ; Show column numbers
(setq-default show-trailing-whitespace t)       ; Show trailing whitespace
(global-hl-line-mode)                           ; Highlight the current line
#+END_SRC

** Better window navigation
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC

** SQL Interactive Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC

** Soft tabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2
      indent-tabs-mode nil)
#+END_SRC

** Prettify symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode +1)

(require 'tex)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (push '("\\=a"      . ?ā) prettify-symbols-alist)
            (push '("\\=e"      . ?ē) prettify-symbols-alist)
            (push '("\\=\\i "   . ?ī) prettify-symbols-alist)
            (push '("\\=\\i\\"  . ?ī) prettify-symbols-alist)
            (push '("\\=o"      . ?ō) prettify-symbols-alist)
            (push '("\\=u"      . ?ū) prettify-symbols-alist)
            (push '("\\alpha"   . ?α) prettify-symbols-alist)
            (push '("\\lambda"  . ?λ) prettify-symbols-alist)
            (push '("\\pi"      . ?π) prettify-symbols-alist)
            (push '("\\omega"   . ?ω) prettify-symbols-alist)))

(add-hook 'org-mode-hook
          (lambda ()
            (push '("->" . ?→) prettify-symbols-alist)))

(add-hook 'python-mode-hook
          (lambda ()
            (push '("+="                . ?⩲) prettify-symbols-alist)
            (push '("=="                . ?≡) prettify-symbols-alist)
            (push '("!="                . ?≢) prettify-symbols-alist)
            (push '("self"              . ?∫) prettify-symbols-alist)
            (push '("in"                . ?∈) prettify-symbols-alist)
            (push '("not in"            . ?∉) prettify-symbols-alist)
            (push '("<="                . ?≤) prettify-symbols-alist)
            (push '(">="                . ?≥) prettify-symbols-alist)
            (push '("and"               . ?∧) prettify-symbols-alist)
            (push '("or"                . ?∨) prettify-symbols-alist)
            (push '("float('inf')"      . ?∞) prettify-symbols-alist)
            (push '("float(\"inf\")"    . ?∞) prettify-symbols-alist)
            (push '("not"               . ?¬) prettify-symbols-alist)
            (push '("lambda"            . ?λ) prettify-symbols-alist)))

(add-hook 'c-mode-hook
          (lambda ()
            (push '("+=" . ?⩲) prettify-symbols-alist)
            (push '("*=" . ?⩮) prettify-symbols-alist)
            (push '("<=" . ?≤) prettify-symbols-alist)
            (push '(">=" . ?≥) prettify-symbols-alist)
            (push '("==" . ?≡) prettify-symbols-alist)
            (push '("!=" . ?≢) prettify-symbols-alist)
            (push '("->" . ?→) prettify-symbols-alist)
            (push '("&&" . ?∧) prettify-symbols-alist)
            (push '("||" . ?∨) prettify-symbols-alist)))
#+END_SRC

* Package customizations
** One-liners
#+BEGIN_SRC emacs-lisp
(nyan-mode)
(rainbow-mode)
(require 'sr-speedbar)
#+END_SRC

** AucTeX
#+BEGIN_SRC emacs-lisp
(setq-default TeX-engine 'xetex)
(setq-default TeX-PDF-mode t)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** calc
#+BEGIN_SRC emacs-lisp
; Use <f12> to open Quick Calc, using the current region as input if it is active.
(defun andrew/open-quick-calc ()
  (interactive)
  (if mark-active
      (calc-grab-region (region-beginning) (region-end) nil)
    (quick-calc)))

(global-set-key (kbd "<f12>") 'andrew/open-quick-calc)
#+END_SRC

** evil-mode
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t)   ; Use C-u to scroll up half a page, like in vim.
(evil-mode)
(global-evil-surround-mode 1)   ; Enable evil-surround everywhere
#+END_SRC

** git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(require 'git-gutter-fringe)
(global-git-gutter-mode t)
(setq git-gutter:update-interval 1)
(setq git-gutter-fr:side 'right-fringe)
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
(ivy-mode)

; Keybindings
(global-set-key (kbd "C-s") 'swiper)
(define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
(define-key ivy-minibuffer-map (kbd "<tab>")    'ivy-alt-done)
#+END_SRC

** jedi
*** Note: Run ~M-x jedi:install-server RET~ if this is a new installation.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)        ; Only in Python, as it's of no use everywhere else
(setq jedi:complete-on-dot t)                   ; Suggest completions when a period is inserted
#+END_SRC

** linum-relative
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(require 'linum-relative)
(setq linum-relative-current-symbol "")
(linum-relative-global-mode)
#+END_SRC

** mark-multiple
#+BEGIN_SRC emacs-lisp
(define-key evil-visual-state-map (kbd "M-j") 'mark-next-like-this)
(define-key evil-visual-state-map (kbd "M-k") 'mark-previous-like-this)
#+END_SRC

** mu4e
*** Basic configuration
#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(setq mu4e-maildir (expand-file-name "~/.maildir"))
(setq mu4e-get-mail-command "offlineimap")

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-debug-info t)
#+END_SRC

*** Account setup
#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "Gmail"
           :enter-func (lambda () (mu4e-message "Switch to Gmail context"))
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg
                                                               :to "andy.bill.smith@gmail.com")))
           :vars '((user-mail-address . "andy.bill.smith@gmail.com")
                   (user-full-name . "Andrew Smith")
                   (mu4e-compose-signature . "Andrew Smith\n")
                   (mu4e-drafts-folder . "/Gmail/drafts")
                   (mu4e-sent-folder . "/Gmail/sent")
                   (mu4e-trash-folder . "/Gmail/trash")
                   (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                   (smtpmail-default-smtp-server . "smtp.gmail.com")
                   (smtpmail-smtp-server . "smtp.gmail.com")
                   (smtpmail-smtp-service . 587)))
         ,(make-mu4e-context
           :name "School"
           :enter-func (lambda () (mu4e-message "Switch to School context"))
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg
                                                               :to "18smitha@smtexas.org")))
           :vars '((user-mail-address . "18smitha@smtexas.org")
                   (user-full-name . "Andrew Smith")
                   (mu4e-compose-signature . "Andrew Smith, Class of 2018\n")
                   (mu4e-drafts-folder . "/School/Drafts")
                   (mu4e-sent-folder . "/School/Sent")
                   (mu4e-trash-folder . "/School/Trash")
                   (smtpmail-starttls-credentials . (("localhost" 1025 nil nil)))
                   (smtpmail-default-smtp-server . "localhost")
                   (smtpmail-smtp-server . "localhost")
                   (smtpmail-smtp-service . 1025)))))
#+END_SRC

*** Notifications
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)    ; Always display alerts in the modeline
(setq mu4e-alert-interesting-mail-query                              ; Don't notify about messages in non-essential directories
      (concat
       "flag:unread"
       " AND NOT flag:trashed"
       " AND NOT maildir:"
       "\"/Gmail/[Gmail].All Mail\""
       "\"/Gmail/[Gmail].Trash\""))
#+END_SRC

*** Shortcuts
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir-shortcuts
      '(("/Gmail/INBOX" . ?g)
        ("/School/INBOX" . ?s)))
#+END_SRC

** org-mode
*** org-agenda
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)                   ; Open the org-mode agenda from anywhere
(setq org-agenda-ndays 7)                              ; Show agenda for 7 days
(setq org-agenda-start-on-weekday nil)                 ; Don't always start timeline on weekday
(setq org-agenda-todo-ignore-scheduled 'future)        ; Only show scheduled items for the current day
(setq org-agenda-tags-todo-honor-ignore-options t)
(setq org-agenda-skip-deadline-if-done t)              ; Don't show deadlines for tasks that are done
(setq org-agenda-skip-scheduled-if-done t)             ; Same thing, with schedules
(setq org-deadline-warning-days 7)                     ; Only warn about deadlines due after the current week
(setq org-agenda-todo-ignore-deadlines 'near)          ; Don't warn about deadlines due after the current week
(setq org-agenda-start-with-log-mode t)                ; Show clock summary
(setq org-agenda-log-mode-items '(closed clock state)) ; Show all clock items
#+END_SRC

*** org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+END_SRC

*** org-capture
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org-mode")                                       ; Directory containing org files
(setq org-default-notes-file (concat org-directory "/notes.org"))       ; Default notes file
(define-key global-map "\C-cc" 'org-capture)                            ; org-capture from anywhere

(setq org-capture-templates
      '(("t" "To-Do"
             entry (file+headline "~/org-mode/todo.org" "General")
             "* □ %?             %^g"
             :empty-lines 1)
        ("s" "School To-Do"
             entry (file+headline "~/org-mode/todo.org" "School")
             "* □ %?             %^g"
             :empty-lines 1)
        ("q" "Question"
             entry (file "~/org-mode/questions.org")
             "* %?             %^g\n-- Asked on %t"
             :empty-lines 1)
        ("n" "General Note"
             entry (file "~/org-mode/notes.org")
             "* %?\n-- Taken on %t"
             :empty-lines 1)))                                          ; Capture templates
#+END_SRC

*** Formatting
#+BEGIN_SRC emacs-lisp
(setq-default org-hide-emphasis-markers t)                ; Hide org-mode formatting characters
(setq-default org-todo-keyword-faces '(("⎅" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("□" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("⧉" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("⧆" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("⊟" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("⧈" . (:family "Apple Symbols" :foreground "#FB4933"))
                                       ("⧰" . (:family "Apple Symbols" :foreground "#FABD2F"))
                                       ("⧯" . (:family "Apple Symbols" :foreground "#84BB26"))
                                       ("⧮" . (:family "Apple Symbols" :foreground "#84BB26"))))
#+END_SRC

** rainbow-delimiters-mode
#+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
#+END_SRC

*** global-rainbow-delimiters-mode workaround
#+BEGIN_SRC emacs-lisp
(add-hook 'after-change-major-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

** template
#+BEGIN_SRC emacs-lisp
(require 'template)
(template-initialize)

(add-to-list 'template-expansion-alist
             '("USDATE" (insert (format-time-string "%-m/%-d/%Y"))))
#+END_SRC

** twittering-mode
#+BEGIN_SRC emacs-lisp
(setq twittering-icon-mode t) ; Show user profile photos
#+END_SRC

** w3m
*** General
#+BEGIN_SRC emacs-lisp
(w3m-lnum-mode)                                 ; Emulate Vimperator for Firefox
(setq w3m-default-display-inline-images t)      ; Display all images inline
(setq w3m-use-cookies t)                        ; The web doesn't work very well without cookies
#+END_SRC

*** Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'w3m-display-hook
          (lambda (url)
            (let ((buffer-read-only nil))
              (delete-trailing-whitespace))))
#+END_SRC
