#+title: Emacs init File
#+author: Andrew Smith

* Use Homebrew programs
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/local/bin" (getenv "PATH")))
(add-to-list 'exec-path "/usr/local/bin")

(require 'cl)	; Common Lisp
#+END_SRC

* Packages
** MELPA
#+BEGIN_SRC emacs-lisp
(load "package")
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/") t)	; New MELPA repository
(setq package-archive-enable-alist '(("melpa" deft magit)))	; Index MELPA packages for easy browsing
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
(defvar andrew/packages '(2048-game		; Play a game of 2048.  Why not?
			  auctex                ; Enhancements for LaTeX
			  auto-complete		; Auto-completion for most programming languages
			  autopair
			  deft			; Note-taking similar to Notational Velocity
			  evil			; vim emulation
			  evil-surround		; surround.vim for evil-mode
			  exec-path-from-shell  ; Use path variables from the shell (ZSH in my case)
			  helm			; Fuzzy matching for files, functions, and everything else
			  helm-spotify		; Control Spotify from Emacs, using helm
			  jedi			; Enhance Python auto-completion and argument hinting
			  linum-relative	; Relative line numbers, similar to vim's hybrid line numbering
			  magit			; git integration
			  markdown-mode		; Markdown support
			  marmalade		; Marmalade repository
			  nyan-mode		; Use Nyan Cat as a file position indicator.  Stupid, but surprisingly useful.
			  rainbow-delimiters	; Color-coordinate matching delimiters
			  rainbow-mode		; Show color strings in their actual colors
			  solarized-theme	; Solarized color theme
			  w3m			; Web browsing in Emacs
			  yasnippet)		; TextMate-like snippets
"Default packages")
#+END_SRC

** Install non-installed packages on startup
#+BEGIN_SRC emacs-lisp
(defun andrew/packages-installed-p ()
  (loop for package in andrew/packages
	when (not (package-installed-p package)) do (return nil)
	finally (return t)))

(unless (andrew/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (package andrew/packages)
    (when (not (package-installed-p package))
      (package-install package))))
#+END_SRC

* Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))	; Don't clutter up my directories with backup files
(setq backup-by-copying t)					; Copy files to create backups
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)					; Delete old backup files
#+END_SRC

* GUI options
** No GUI elements
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Display buffer name in window title
#+BEGIN_SRC emacs-lisp
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)			; Yay, laziness!
(global-set-key (kbd "RET") 'newline-and-indent)	; Sensical RET binding
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "-*-PragmataPro-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1" ))
(set-face-attribute 'default t :font "-*-PragmataPro-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1" )
#+END_SRC

** Latin input method
#+BEGIN_SRC emacs-lisp
(defun andrew/detect-latin-input ()
  (interactive)
  (ignore-errors
    (setq bpos (line-beginning-position))
    (setq epos (line-end-position))
    (when (string-match ".@latin." (buffer-substring-no-properties bpos epos))
      (set-input-method 'latin-alt-postfix))))
(add-hook 'after-change-major-mode-hook 'andrew/detect-latin-input)	; Check if every file is a Latin file on load
(add-hook 'after-save-hook 'andrew/detect-latin-input)			; Check if every file is a Latin file on save
#+END_SRC

** Buffer settings
#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1			; Show keystrokes quickly
      use-dialog-box nil			; No dialog boxes when running in GUI mode
      visual-bell t)				; Don't beep every five seconds
(show-paren-mode t)				; Show matching parentheses
(setq column-number-mode t)			; Show column numbers
(setq-default show-trailing-whitespace t)	; Show trailing whitespace
(global-hl-line-mode)				; Highlight the current line
#+END_SRC

** Better window navigation
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC

** SQL Interactive Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
	  (lambda ()
	    (toggle-truncate-lines t)))
#+END_SRC

** Soft tabs
#+BEGIN_SRC emacs-lisp
(setq tab-width 4
      indent-tabs-mode nil)
#+END_SRC

** Prettify symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode +1)

(require 'tex)
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (push '("\\={a}" . ?ā) prettify-symbols-alist)
	    (push '("\\={e}" . ?ē) prettify-symbols-alist)
	    (push '("\\=\\i " . ?ī) prettify-symbols-alist)
	    (push '("\\={o}" . ?ō) prettify-symbols-alist)
	    (push '("\\={u}" . ?ū) prettify-symbols-alist)))

(add-hook 'org-mode-hook
	  (lambda ()
	    (push '("->" . ?→) prettify-symbols-alist)))

(add-hook 'python-mode-hook
	  (lambda ()
	    (push '("+=" . ?⩲) prettify-symbols-alist)
	    (push '("==" . ?≡) prettify-symbols-alist)
	    (push '("!=" . ?≢) prettify-symbols-alist)
	    (push '("self" . ?∫) prettify-symbols-alist)
	    (push '("in" . ?∈) prettify-symbols-alist)
	    (push '("not in" . ?∉) prettify-symbols-alist)
	    (push '("<=" . ?≤) prettify-symbols-alist)
	    (push '(">=" . ?≥) prettify-symbols-alist)
	    (push '("and" . ?∧) prettify-symbols-alist)
	    (push '("or" . ?∨) prettify-symbols-alist)
	    (push '("float('inf')" . ?∞) prettify-symbols-alist)
	    (push '("float(\"inf\")" . ?∞) prettify-symbols-alist)
	    (push '("not" . ?¬) prettify-symbols-alist)
	    (push '("lambda" . ?λ) prettify-symbols-alist)))
#+END_SRC

* Package customizations
** One-liners
#+BEGIN_SRC emacs-lisp
(helm-mode 1)
(nyan-mode)
(rainbow-mode)
#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** deft
#+BEGIN_SRC emacs-lisp
(require 'deft)
(setq deft-extension "markdown")	; Always use Markdown, except for special cases
(setq deft-directory "~/Dropbox/deft")	; Sync deft files with Dropbox for access everywhere
(setq deft-text-mode 'markdown-mode)
#+END_SRC

** evil-mode
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t)	; Use C-u to scroll up half a page, like in vim.
(evil-mode)
(global-evil-surround-mode 1)	; Enable evil-surround everywhere
#+END_SRC

** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-copy-env "PYTHONPATH")	; Use $PYTHONPATH so the proper libraries are used
(exec-path-from-shell-initialize)
#+END_SRC

** ispell
#+BEGIN_SRC emacs-lisp
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))	; Use hunspell instead of ispell
#+END_SRC

** jedi
*** Note: Run ~M-x jedi:install-server RET~ if this is a new installation.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)	; Only in Python, as it's of no use everywhere else
(setq jedi:complete-on-dot t)			; Suggest completions when a period is inserted
#+END_SRC

** linum-relative
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(require 'linum-relative)
#+END_SRC

** markdown-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
#+END_SRC

** mu4e
*** General
#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(setq mu4e-maildir "~/.maildir")	; Set in ~/.offlineimaprc
#+END_SRC

*** Folders
**** Specify folder locations for different types of mail
#+BEGIN_SRC emacs-lisp
(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")
#+END_SRC

**** Shortcuts
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))
#+END_SRC

*** Personal Information
#+BEGIN_SRC emacs-lisp
(setq
   user-mail-address "andy.bill.smith@gmail.com"
   user-full-name  "Andrew W. Smith"
   mu4e-compose-signature
    (concat
      "--\n"
      "Andrew Smith\n"))
#+END_SRC

*** Behaviours
#+BEGIN_SRC emacs-lisp
(setq mu4e-sent-messages-behavior 'delete)		; Dont save sent messages to Sent Messages, as Gmail does this automatically
(setq mu4e-get-mail-command "offlineimap")		; Use offlineimap to fetch mail
(setq message-kill-buffer-on-exit t)			; We don't need message buffers to stick around after we're done with them

(defun no-auto-fill()
  (auto-fill-mode -1))
(add-hook 'mu4e-compose-mode-hook 'no-auto-fill)	; Don't automatically insert line breaks
#+END_SRC

*** Render HTML messages
#+BEGIN_SRC emacs-lisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq mu4e-view-prefer-html t)
#+END_SRC

*** Compose messages with org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
(setq org-mu4e-convert-to-html t)
(defalias 'org-mail 'org-mu4e-compose-org-mode)
#+END_SRC

*** Sending mail
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-stream-type 'starttls
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
#+END_SRC

** org-mode
*** org-agenda
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)	; Open the org-mode agenda from anywhere
#+END_SRC

*** org-capture
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org-mode")					; Directory containing org files
(setq org-default-notes-file (concat org-directory "/notes.org"))	; Default notes file
(define-key global-map "\C-cc" 'org-capture)				; org-capture from anywhere

(setq org-capture-templates
      '(("t" "To-Do"
	     entry (file+headline "~/org-mode/todo.org" "General")
             "* TODO %?             %^g"
	     :empty-lines 1)
        ("s" "School To-Do"
	     entry (file+headline "~/org-mode/todo.org" "School")
	     "* TODO %?             %^g"
	     :empty-lines 1)
	("q" "Question"
	     entry (file "~/org-mode/questions.org")
	     "* %?             %^g\n-- Asked on %t"
	     :empty-lines 1)
        ("n" "General Note"
	     entry (file "~/org-mode/notes.org")
	     "* %?\n-- Taken on %t"
	     :empty-lines 1)))						; Capture templates
#+END_SRC

** rainbow-delimiters-mode
#+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
#+END_SRC

*** global-rainbow-delimiters-mode workaround
#+BEGIN_SRC emacs-lisp
(add-hook 'after-change-major-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

** Solarized Dark (colour theme)
#+BEGIN_SRC emacs-lisp
(setq solarized-distinct-fringe-background t)	; Make the fringe stand out from the background
(setq solarized-use-less-bold t)		; Make my code less distracting
(load-theme 'solarized-dark t)			; Use the dark variant of Solarized
(setq x-underline-at-descent-line t)		; Place the underline at the very bottom of the fringe
#+END_SRC

** w3m
*** General
#+BEGIN_SRC emacs-lisp
(w3m-lnum-mode)					; Emulate Vimperator for Firefox
(setq w3m-default-display-inline-images t)	; Display all images inline
(setq w3m-use-cookies t)			; The web doesn't work very well without cookies
#+END_SRC

*** Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'w3m-display-hook
	  (lambda (url)
	    (let ((buffer-read-only nil))
	      (delete-trailing-whitespace))))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
 '(markdown-command
   "pandoc -f markdown -t html -s --mathjax --highlight-style pygments"))
#+END_SRC
